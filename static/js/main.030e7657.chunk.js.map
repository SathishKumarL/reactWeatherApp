{"version":3,"sources":["components/Forecast/Forecast.module.css","components/Logo/weather-forecast-icon.jpg","components/Card/Card.js","components/BarChart/BarChart.js","components/Forecast/Forecast.js","App.js","index.js"],"names":["module","exports","Card","title","itemId","activeId","selected","onClick","unit","visibility","React","useContext","VisibilityContext","className","tabIndex","src","weatherIcon","BarChart","chartData","console","log","Paper","data","max","valueField","argumentField","text","Forecast","useState","currentLocation","setCurrentLocation","items","setItems","setSelected","setUnit","loading","setLoading","latitude","setLatitude","longitude","setLongitude","days","setDays","setChartData","setActiveId","allDate","setAllDate","useEffect","navigator","geolocation","getCurrentPosition","position","coords","apiCall","fetch","then","response","json","cod","Error","locationVar","city","name","country","list","forEach","arrayItem","dateArray","dt_txt","split","indexOf","push","day","i","length","filter","j","average","reduce","total","next","main","temp","toFixed","map","ind","index","id","dataProcess","catch","err","Arrow","children","disabled","isItemSelected","find","el","handleItemClick","getItemById","itemSelected","currentSelected","concat","time","indexSelected","onSubmit","e","preventDefault","Radio","type","checked","value","onChange","target","LeftArrow","isFirstItemVisible","scrollPrev","RightArrow","isLastItemVisible","scrollNext","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.030e7657.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textInput\":\"Forecast_textInput__DNtOW\",\"Radio\":\"Forecast_Radio__HSEhU\",\"Button\":\"Forecast_Button__2wNzW\"};","module.exports = __webpack_public_path__ + \"static/media/weather-forecast-icon.367aff04.jpg\";","import React from \"react\";\r\nimport { VisibilityContext } from \"react-horizontal-scrolling-menu\";\r\nimport weatherIcon from \"../Logo/weather-forecast-icon.jpg\"\r\n\r\nexport default function Card({ title, itemId, selected, activeId, onClick,unit }) {\r\n  const visibility = React.useContext(VisibilityContext);\r\n  \r\n  return (\r\n    <div\r\n      onClick={() => onClick(visibility)}\r\n      className={`cardBox ${activeId === title && \"is-active\"}`}\r\n      \r\n      tabIndex={0}\r\n    >\r\n      <div className=\"card\">\r\n        <div className=\"cardTitle\">{title}</div>\r\n        <img src={weatherIcon} className=\"cardIcon\"/>\r\n        <div className=\"temp\">{itemId} Â°{unit === 'imperial' ? 'F' : 'C'}</div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n  Chart,\r\n  BarSeries,\r\n  Title,\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n} from \"@devexpress/dx-react-chart-material-ui\";\r\nimport { Animation } from \"@devexpress/dx-react-chart\";\r\n\r\nconst BarChart = ({ chartData }) => {\r\n  console.log('barchart data');\r\n  console.log(chartData);\r\n  return (\r\n    <Paper>\r\n      <Chart data={chartData}>\r\n        <ArgumentAxis />\r\n        <ValueAxis max={6} />\r\n        <BarSeries valueField=\"temp\" argumentField=\"time\" />\r\n        <Title text=\"Days Weather Chart\" />\r\n        <Animation />\r\n      </Chart>\r\n    </Paper>\r\n  );\r\n};\r\nexport default BarChart;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Card from \"../Card/Card\";\r\nimport BarChart from \"../BarChart/BarChart\";\r\nimport { Radio } from \"./Forecast.module.css\";\r\nimport { ScrollMenu, VisibilityContext } from \"react-horizontal-scrolling-menu\";\r\n\r\nconst Forecast = () => {\r\n  const [currentLocation, setCurrentLocation] = useState(\"\");\r\n  const [items, setItems] = useState([]);\r\n  const [selected, setSelected] = React.useState([]);\r\n  let [unit, setUnit] = useState(\"imperial\");// set the initial unit as imperial for API request\r\n  let [loading, setLoading] = useState(false);\r\n  let [latitude, setLatitude] = useState(\"\");\r\n  let [longitude, setLongitude] = useState(\"\");\r\n  let [days, setDays] = useState([]);\r\n  let [chartData, setChartData] = useState([]);\r\n  let [activeId, setActiveId] = useState(null);\r\n  let [allDate, setAllDate] = useState([]);\r\n//to get the location of access to pass it to API request\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      setLatitude(position.coords.latitude);\r\n      setLongitude(position.coords.longitude);\r\n    });\r\n    apiCall();\r\n  }, [unit, longitude]);\r\n//Api request to fetch the 5 days record\r\n  const apiCall = () => {\r\n    if (latitude !== \"\") {\r\n      setLoading(true);\r\n      fetch(\r\n        `http://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=5eab201bc687d1a5b22c3ea45bcaa329&units=${unit}`,\r\n        {}\r\n      )\r\n        .then((response) => response.json())\r\n        .then((response) => {\r\n          if (response.cod !== \"200\") {\r\n            throw new Error();\r\n          }\r\n          const locationVar = `${response.city.name}, ${response.city.country}`\r\n          setCurrentLocation(locationVar);\r\n          dataProcess(response);\r\n        })\r\n        .catch((err) => {\r\n          setLoading(false);\r\n        });\r\n    }\r\n  };\r\n//to process the response from API as per the business logic\r\n  function dataProcess(response) {\r\n    setLoading(false);\r\n    var allDate = [];\r\n    response.list.forEach(function (arrayItem) {\r\n      arrayItem.dateArray = arrayItem.dt_txt.split(\" \");\r\n      if (allDate.indexOf(arrayItem.dateArray[0]) < 0) {\r\n        allDate.push(arrayItem.dateArray[0]);\r\n      }\r\n    });\r\n    setAllDate(allDate);//get all the dates from response\r\n    var day = [];\r\n    for (let i = 0; i < allDate.length; i++) {\r\n      day[i] = [];\r\n      for (var filter in response.list) {\r\n        if (allDate[i] === response.list[filter].dateArray[0]) {\r\n          day[i].push(response.list[filter]); // form a seperate array for each date to get the average and to render the bar chart\r\n        }\r\n      }\r\n    }\r\n    for (let j = 0; j < day.length; j++) {\r\n      day[j][0].average =\r\n        (day[j].reduce((total, next) => total + next.main.temp, 0) /\r\n        day[j].length).toFixed(2);// getting the average of a day\r\n    }\r\n    const dateItem = () =>\r\n      allDate.map((ind, index) => ({\r\n        id: `${ind}`,\r\n        average: day[index][0].average,\r\n      }));\r\n    setItems(dateItem);//for the data for the card carousel component\r\n    setDays(()=>[...day]);\r\n    \r\n  }\r\n//Api call trigger along with loading setState to load the screen\r\n  function getForecast(e) {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    apiCall();\r\n  }\r\n//Carousel arrow business logic to show and hide\r\n  function Arrow({ children, disabled, onClick }) {\r\n    return (\r\n      <button\r\n        disabled={disabled}\r\n        onClick={onClick}\r\n      >\r\n        {children}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  function LeftArrow() {\r\n    const { isFirstItemVisible, scrollPrev } =\r\n      React.useContext(VisibilityContext);\r\n\r\n    return (\r\n      <Arrow disabled={isFirstItemVisible} onClick={() => scrollPrev()}>\r\n        Left\r\n      </Arrow>\r\n    );\r\n  }\r\n\r\n  function RightArrow() {\r\n    const { isLastItemVisible, scrollNext } =\r\n      React.useContext(VisibilityContext);\r\n\r\n    return (\r\n      <Arrow disabled={isLastItemVisible} onClick={() => scrollNext()}>\r\n        Right\r\n      </Arrow>\r\n    );\r\n  }\r\n  const isItemSelected = (id) => !!selected.find((el) => el === id);\r\n//business logic on click of card\r\n  const handleItemClick =\r\n    (itemId) =>\r\n    ({ getItemById }) => {\r\n      const itemSelected = isItemSelected(itemId);\r\n      setActiveId(itemId);\r\n      setSelected((currentSelected) =>\r\n        itemSelected\r\n          ? currentSelected.filter((el) => el !== itemId)\r\n          : currentSelected.concat(itemId)\r\n      );\r\n      barChartData(allDate.indexOf(itemId));\r\n    };\r\n//to render the initial barchart on click of card\r\n  function barChartData(i) {\r\n    const chartData = () =>\r\n      days[i].map((ind) => ({ time: ind.dateArray[1], temp: ind.main.temp }));\r\n    setChartData(chartData);\r\n  }\r\n//to update barchart data on unit change \r\n  useEffect(() => {\r\n    if(activeId !== null){\r\n    var indexSelected=allDate.indexOf(activeId);\r\n    const chartData = () =>\r\n    days[indexSelected].map((ind) => ({ time: ind.dateArray[1], temp: ind.main.temp }));\r\n  setChartData(chartData);\r\n    }\r\n  }, [days]);\r\n//to get a fresh API on unit Select or location update\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      setLatitude(position.coords.latitude);\r\n      setLongitude(position.coords.longitude);\r\n    });\r\n    apiCall();\r\n  }, [unit, longitude]);\r\n\r\n  return (\r\n    <div>\r\n      {loading && <div className=\"loading\">loading....</div>}\r\n      {!loading && (\r\n        <div>\r\n          <header className=\"App-header\">\r\n            <h1>React Weather App</h1>\r\n          </header>\r\n          <h2>Weather Conditions of {currentLocation}</h2>\r\n          <form onSubmit={getForecast}>\r\n            <label className={Radio}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"units\"\r\n                checked={unit === \"imperial\"}\r\n                value=\"imperial\"\r\n                onChange={(e) => setUnit(e.target.value)}\r\n              />\r\n              Fahrenheit\r\n            </label>\r\n            <label className={Radio}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"units\"\r\n                checked={unit === \"metric\"}\r\n                value=\"metric\"\r\n                onChange={(e) => setUnit(e.target.value)}\r\n              />\r\n              Celcius\r\n            </label>\r\n          </form>\r\n          <ScrollMenu LeftArrow={LeftArrow} RightArrow={RightArrow}>\r\n            {items.map(({ id, average }) => (\r\n              <Card\r\n                title={id}\r\n                itemId={average} \r\n                key={id}\r\n                activeId={activeId}\r\n                onClick={handleItemClick(id)}\r\n                selected={isItemSelected(id)}\r\n                unit={unit}\r\n              />\r\n            ))}\r\n          </ScrollMenu>\r\n\r\n          {chartData.length > 0 && <BarChart chartData={chartData} />}\r\n          <footer>\r\n            Page created by Sathish\r\n          </footer>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Forecast from \"./components/Forecast/Forecast\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <main>\r\n        <Forecast />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport '@devexpress/dx-react-chart-bootstrap4/dist/dx-react-chart-bootstrap4.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}